package com.shenmintech.cbp.biz.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.shenmintech.cbp.biz.IStudentBiz;
import com.shenmintech.cbp.biz.vo.res.HSRelationVo;
import com.shenmintech.cbp.biz.vo.res.HomeworkStudentRelationVo;
import com.shenmintech.cbp.biz.vo.res.Res4GetUserRelationsVo;
import com.shenmintech.cbp.biz.vo.res.UserRelationVo;
import com.shenmintech.cbp.controller.bean.req.Req4DelStudentBean;
import com.shenmintech.cbp.controller.bean.req.Req4GetHomeworkStudentRelationBean;
import com.shenmintech.cbp.controller.bean.req.Req4GetUserInfoBean;
import com.shenmintech.cbp.controller.bean.req.Req4GetUserRelationIds;
import com.shenmintech.cbp.controller.bean.req.Req4PostStudentBean;
import com.shenmintech.cbp.controller.bean.req.Req4PutStudentBean;
import com.shenmintech.cbp.controller.bean.res.BasicInfo;
import com.shenmintech.cbp.controller.bean.res.CalAndDistributeSuggest;
import com.shenmintech.cbp.controller.bean.res.HisClassMates;
import com.shenmintech.cbp.controller.bean.res.HisCoWorker;
import com.shenmintech.cbp.controller.bean.res.HisCourseMates;
import com.shenmintech.cbp.controller.bean.res.PushedHomework;
import com.shenmintech.cbp.controller.bean.res.Res4DelStudentBean;
import com.shenmintech.cbp.controller.bean.res.Res4GetHomeworkStudentRelationBean;
import com.shenmintech.cbp.controller.bean.res.Res4GetUserInfoBean;
import com.shenmintech.cbp.controller.bean.res.Res4GetUserRelationIds;
import com.shenmintech.cbp.controller.bean.res.Res4PostStudentBean;
import com.shenmintech.cbp.controller.bean.res.Res4PutStudentBean;
import com.shenmintech.cbp.controller.bean.res.WeightBMI;
import com.shenmintech.cbp.entity.TKcEmployee;
import com.shenmintech.cbp.entity.TKcStudent;
import com.shenmintech.cbp.exception.ApplicationException;
import com.shenmintech.cbp.mapper.TKcEmployeeMapper;
import com.shenmintech.cbp.mapper.TKcStudentMapper;
import com.shenmintech.cbp.service.IStudentService;
import com.shenmintech.common.util.StringUtil;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class StudentBizImpl implements IStudentBiz {

	@Autowired
	IStudentService iStudentService;
	
	@Autowired
	TKcStudentMapper tKcStudentMapper;
	
	@Autowired
	TKcEmployeeMapper tKcEmployeeMapper;
	
	@Override
	public Res4PostStudentBean addStudent(Req4PostStudentBean req4PostStudentBean) {
		Res4PostStudentBean resBean = new Res4PostStudentBean();
		String employeeId = req4PostStudentBean.getEmployeeId();
		String groupId = req4PostStudentBean.getGroupId();
		if(StringUtil.checkBlank(employeeId,groupId)){
			resBean.setError(-1);
			resBean.setMsg("employeeId,groupId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		String studentId = "";
		try {
			studentId = iStudentService.add(employeeId, groupId);
		} catch (ApplicationException e) {
			log.error("context", e);
			resBean.setError(-1);
			resBean.setMsg(e.msg);
			resBean.setSuccess(false);
			return resBean;
		}
		resBean.setStudentId(studentId);
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

	@Override
	public Res4DelStudentBean deleteById(Req4DelStudentBean req4DelStudentBean) {
		Res4DelStudentBean resBean = new Res4DelStudentBean();
		String studentId = req4DelStudentBean.getStudentId();
		if(StringUtil.isBlank(studentId)){
			resBean.setError(-1);
			resBean.setMsg("studentId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		try {
			iStudentService.deleteById(studentId);
		} catch (ApplicationException e) {
			log.error("context", e);
			resBean.setError(-1);
			resBean.setMsg(e.msg);
			resBean.setSuccess(false);
			return resBean;
		}
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

	@Override
	public Res4PutStudentBean updateById(Req4PutStudentBean req4PutStudentBean) {
		Res4PutStudentBean resBean = new Res4PutStudentBean();
		
		String groupId = req4PutStudentBean.getGroupId();
		String studentId = req4PutStudentBean.getStudentId();
		if(StringUtil.checkBlank(groupId,studentId)){
			resBean.setError(-1);
			resBean.setMsg("groupId,studentId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		try {
			iStudentService.updateById(groupId,studentId);
		} catch (ApplicationException e) {
			log.error("context", e);
			resBean.setError(-1);
			resBean.setMsg(e.msg);
			resBean.setSuccess(false);
			return resBean;
		}
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

	@SuppressWarnings("static-access")
	@Override
	public Res4GetHomeworkStudentRelationBean selectByTaskId(Req4GetHomeworkStudentRelationBean req4GetHomeworkStudentRelationBean) {
		Res4GetHomeworkStudentRelationBean resBean = new Res4GetHomeworkStudentRelationBean();
		
		String taskId = req4GetHomeworkStudentRelationBean.getTaskId();
		if(StringUtil.checkBlank(taskId)){
			resBean.setError(-1);
			resBean.setMsg("taskId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		int pageNo = -1==req4GetHomeworkStudentRelationBean.getPageNo()?1:req4GetHomeworkStudentRelationBean.getPageNo();
		int rowsPerPage = -1==req4GetHomeworkStudentRelationBean.getPageNo()?99999:req4GetHomeworkStudentRelationBean.getRowsPerPage();
		
		HomeworkStudentRelationVo resVo = new HomeworkStudentRelationVo();
		try {
			resVo = iStudentService.selectHomeworkStudentTrlationByTaskId(taskId, pageNo, rowsPerPage);
		} catch (ApplicationException e) {
			log.error("context", e);
			resBean.setError(-1);
			resBean.setMsg(e.msg);
			resBean.setSuccess(false);
			return resBean;
		}
		List<HSRelationVo> relationVos = resVo.getList();
		Iterator<HSRelationVo> it = relationVos.iterator();
		List<PushedHomework> list = new ArrayList<>();
		while (it.hasNext()) {
			HSRelationVo hsRelationVo = it.next();
			String relationId = hsRelationVo.getRelationId();
			String studentId = hsRelationVo.getStudentId();
			TKcStudent student = tKcStudentMapper.selectByPrimaryKey(studentId);
			if(null==student){
				resBean.setError(-1);
				resBean.setMsg("t_kc_student中不存在id为"+studentId+"的学生");
				resBean.setSuccess(false);
				return resBean;
			}
			String empId = student.getEmployeeFid();
			if(StringUtil.isBlank(empId)){
				resBean.setError(-1);
				resBean.setMsg("t_kc_student中id为"+studentId+"的学生的员工号为空");
				resBean.setSuccess(false);
				return resBean;
			}
			TKcEmployee emp = tKcEmployeeMapper.selectByPrimaryKey(empId);
			if(null==emp){
				resBean.setError(-1);
				resBean.setMsg("t_kc_employee中不存在id为"+empId+"的雇员");
				resBean.setSuccess(false);
				return resBean;
			}
			String remark1 = hsRelationVo.getRemark1();
			PushedHomework pushedHomework = new PushedHomework().builder()
					.relationId(relationId)
					.studentName(emp.getRealName())
					.finishedTime(StringUtil.isBlank(remark1)?"":remark1)
					.build(); 
			list.add(pushedHomework);
		}
		int recordCount = resVo.getRecordCount();
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		resBean.setPageNo(pageNo);
		resBean.setRecordCount(recordCount);
		resBean.setPageSumCount((recordCount+rowsPerPage-1)/rowsPerPage);
		resBean.setList(list);
		return resBean;
	}

	@Override
	public Res4GetUserRelationIds selectRelationsByUserId(Req4GetUserRelationIds req4GetUserRelationIds) {
		Res4GetUserRelationIds resBean = new Res4GetUserRelationIds();
		String userId = req4GetUserRelationIds.getUserId();
		if(StringUtil.checkBlank(userId)){
			resBean.setError(-1);
			resBean.setMsg("userId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		
		Res4GetUserRelationsVo resVo = new Res4GetUserRelationsVo();
		try {
			resVo = iStudentService.selectRelationsByUserId(userId);
		} catch (ApplicationException e) {
			resBean.setError(-1);
			resBean.setMsg(e.msg);
			resBean.setSuccess(false);
			return resBean;
		}
		
		Iterator<UserRelationVo> it = resVo.getVo().iterator();
		while (it.hasNext()) {
			UserRelationVo vo = it.next();
			int code = vo.getRelationCode();
			switch (code) {
			case 1://1同组 
				HisClassMates hisClassMates = new HisClassMates();
				List<String> ids1 = vo.getRelationIds();
				hisClassMates.setClassMates(ids1);
				resBean.setHisClassMates(hisClassMates);
				break;
			case 2://2同课程同学
				HisCourseMates hisCourseMates = new HisCourseMates();
				List<String> ids2 = vo.getRelationIds();
				hisCourseMates.setCourseMates(ids2);
				resBean.setHisCourseMates(hisCourseMates);
				break;
			case 3://3同事 
				HisCoWorker hisCoWorker = new HisCoWorker();
				List<String> ids3 = vo.getRelationIds();
				hisCoWorker.setCoWorkers(ids3);
				resBean.setHisCoWorker(hisCoWorker);
				break;
			default:
				break;
			}
		}
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

	@Override
	@SuppressWarnings("static-access")
	public Res4GetUserInfoBean selectUserInfo(Req4GetUserInfoBean req4GetUserInfo) {
		Res4GetUserInfoBean resBean = new Res4GetUserInfoBean();
		
		String employeeId = req4GetUserInfo.getEmployeeId();
		if(StringUtil.checkBlank(employeeId)){
			resBean.setError(-1);
			resBean.setMsg("employeeId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		
		BasicInfo basicInfo = new BasicInfo().builder()
				.employeeId(employeeId)
				.realName("")
				.memberType("")
				.sex("")
				.calUnit("")
				.mobile("")
				.email("")
				.build();
		
		WeightBMI weightBMI = new WeightBMI().builder()
				.bmiStr("")
				.healthWeightBetween("")
				.currentWeight("")
				.initWeight("")
				.build();
		
		CalAndDistributeSuggest calAndDistributeSuggest = new CalAndDistributeSuggest().builder()
				.dailyIntake("")
				.breakfastSuggest("")
				.lubchSuggest("")
				.supperSuggest("")
				.addSuggest("")
				.build();
		
		resBean.setBasicInfo(basicInfo);
		resBean.setWeightBMI(weightBMI);
		resBean.setCalAndDistributeSuggest(calAndDistributeSuggest);
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

}
