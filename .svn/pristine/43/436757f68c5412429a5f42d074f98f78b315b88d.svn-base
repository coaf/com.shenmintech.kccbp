package com.shenmintech.cbp.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.shenmintech.base.template.IdWorkerTemplate;
import com.shenmintech.cbp.entity.TKcEmployee;
import com.shenmintech.cbp.entity.TKcGroup;
import com.shenmintech.cbp.entity.TKcGroupExample;
import com.shenmintech.cbp.entity.TKcStudent;
import com.shenmintech.cbp.entity.TKcStudentExample;
import com.shenmintech.cbp.exception.ApplicationException;
import com.shenmintech.cbp.mapper.TKcEmployeeMapper;
import com.shenmintech.cbp.mapper.TKcGroupMapper;
import com.shenmintech.cbp.mapper.TKcStudentMapper;
import com.shenmintech.cbp.service.IStudentService;
import com.shenmintech.common.util.Constants;
import com.shenmintech.common.util.StringUtil;

@Service
@Transactional
public class StudentServiceImpl implements IStudentService {
	
	@Autowired
	TKcGroupMapper tKcGroupMapper;
	
	@Autowired
	TKcStudentMapper tKcStudentMapper;
	
	@Autowired
	TKcEmployeeMapper tKcEmployeeMapper;
	
	@Autowired
	IdWorkerTemplate idWorkerTemplate;
	
	@Override
	public String add(String employeeId, String groupId) {
		String studentId = "";
		
		TKcEmployee employee = tKcEmployeeMapper.selectByPrimaryKey(employeeId);
		if(null == employee || -1 == employee.getStatus()) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"添加学生失败:t_kc_employee中不存在id为"+employeeId+"的记录",Constants.BLANKSTR);
		if(StringUtil.isBlank(employee.getUserId()) || StringUtil.isBlank(employee.getCompanyFid())) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"t_kc_employee中id为"+employeeId+"的记录存在数据缺失，请联系技术排查",Constants.BLANKSTR);
		
		TKcGroup group = tKcGroupMapper.selectByPrimaryKey(groupId);
		if(null == group || -1 == group.getStatus()) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"添加学生失败:t_kc_group中不存在id为"+groupId+"的记录",Constants.BLANKSTR);
		String courseId = group.getCourseFid();
		if(StringUtil.isBlank(courseId)) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"t_kc_group中id为"+groupId+"的记录存在数据缺失，请联系技术排查",Constants.BLANKSTR);
		
		TKcGroupExample groupExample = new TKcGroupExample();
		groupExample.or().andStatusNotEqualTo(-1).andCourseFidEqualTo(courseId);
		List<TKcGroup> groups = tKcGroupMapper.selectByExample(groupExample);
		List<String> groupIdList = groups.stream().map(n->n.getId()).collect(Collectors.toList());
		
		TKcStudentExample studentExample = new TKcStudentExample();
		studentExample.or().andEmployeeFidEqualTo(employeeId).andGroupFidIn(groupIdList);//查看当前这个员工在这个课程的所有小组里面有没有添加过
		List<TKcStudent> students = tKcStudentMapper.selectByExample(studentExample);
		if(0==students.size()){//新添加
			TKcStudent student = new TKcStudent();
			studentId = idWorkerTemplate.generateId();
			student.setId(studentId);
			student.setEmployeeFid(employeeId);
			student.setGroupFid(groupId);
			student.setStatus(0);
			tKcStudentMapper.insertSelective(student);
			
		}else if(1==students.size()){
			TKcStudent student = students.get(0);
			Integer status = student.getStatus();
			if(-1 == status){
				TKcStudent curStudent = new TKcStudent();
				curStudent.setId(student.getId());
				curStudent.setGroupFid(groupId);
				curStudent.setStatus(0);
				tKcStudentMapper.updateByPrimaryKeySelective(curStudent);
				studentId = student.getId();
			}else throw new ApplicationException(Constants.META_STATUS_CODE_D1,"添加学生失败:脏数据！t_kc_student中employeeId为"+employeeId+",courseId为"+courseId+"的记录找到1条，其状态status不为-1，status："+status+"，请求助技术部排查垃圾数据",Constants.BLANKSTR);
		}else throw new ApplicationException(Constants.META_STATUS_CODE_D1,"添加学生失败:脏数据！t_kc_student中employeeId为"+employeeId+",courseId为"+courseId+"的记录找到多条，请联系技术部排查垃圾数据",Constants.BLANKSTR);
		return studentId;
	}

	@Override
	public void deleteById(String id) {
		TKcStudent student = new TKcStudent();
		student.setId(id);
		student.setStatus(-1);
		int delCount = tKcStudentMapper.updateByPrimaryKeySelective(student);
		if(1!=delCount) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"移除学生失败:脏数据！t_kc_student中Id为"+id+"的学生记录不唯一或不存在，请联系技术部排查垃圾数据",Constants.BLANKSTR);
	}

	@Override
	public void updateById(String groupId, String studentId) {
		TKcGroup group = tKcGroupMapper.selectByPrimaryKey(groupId);
		if(null == group || -1 == group.getStatus()) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"转移学生失败:t_kc_group中不存在id为"+groupId+"的记录",Constants.BLANKSTR);
		
		TKcStudent student = new TKcStudent();
		student.setId(studentId);
		student.setGroupFid(groupId);
		int updateCount = tKcStudentMapper.updateByPrimaryKeySelective(student);
		if(1!=updateCount) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"转移学生失败:脏数据！t_kc_student中Id为"+studentId+"的学生记录不唯一或不存在，请联系技术部排查垃圾数据",Constants.BLANKSTR);
	}

	@Override
	public int countByGroupIds(List<String> groupIds) {
		int i = 0;
		if(groupIds.size()>0){
			TKcStudentExample example = new TKcStudentExample();
			example.or().andStatusNotEqualTo(-1).andGroupFidIn(groupIds);
			i = tKcStudentMapper.countByExample(example);
		}
		
		return i;
	}

	@Override
	public String searchByEmployeeIdAndGroupIds(String employeeId, List<String> groupIds) {
		String groupId = "";
		TKcStudentExample kcStudentExample = new TKcStudentExample();
		kcStudentExample.or().andStatusNotEqualTo(-1).andEmployeeFidEqualTo(employeeId).andGroupFidIn(groupIds);
		List<TKcStudent> students = tKcStudentMapper.selectByExample(kcStudentExample);
		if(0==students.size()){
		}else if(1==students.size()){
			TKcStudent student = students.get(0);
			groupId = student.getGroupFid();
		}else{
			throw new ApplicationException(Constants.META_STATUS_CODE_D1,"数据有误:学生在同一个课程的两个小组内，请联系技术部相关人员修正脏数据",Constants.BLANKSTR);
		}
		return groupId;
	}

	@Override
	public List<String> selectByEmployeeId(String employeeId) {
		TKcStudentExample example = new TKcStudentExample();
		example.or().andStatusNotEqualTo(-1).andEmployeeFidEqualTo(employeeId);
		List<TKcStudent> tKcStudents = tKcStudentMapper.selectByExample(example);
		if(0==tKcStudents.size()) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"表t_kc_student中未找到employeeId="+employeeId+"的学生",Constants.BLANKSTR);
		return tKcStudents.stream().map(n->n.getId()).collect(Collectors.toList());
	}

	@Override
	public List<String> searchStudentIdsByGroupIds(List<String> groupIds) {
		TKcStudentExample kcStudentExample = new TKcStudentExample();
		kcStudentExample.or().andStatusNotEqualTo(-1).andGroupFidIn(groupIds);
		List<TKcStudent> students = tKcStudentMapper.selectByExample(kcStudentExample);
		List<String> studentIds = students.stream().map(n->n.getId()).collect(Collectors.toList());
		return studentIds;
	}

}
