package com.shenmintech.cbp.biz.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.shenmintech.cbp.biz.ICourseBiz;
import com.shenmintech.cbp.biz.vo.ques.Req4PostCourseVo;
import com.shenmintech.cbp.biz.vo.res.Res4CourseTypeVo;
import com.shenmintech.cbp.biz.vo.res.Res4GetComVo;
import com.shenmintech.cbp.biz.vo.res.Res4GetCourseTableVo;
import com.shenmintech.cbp.biz.vo.res.Res4GetCourseVo;
import com.shenmintech.cbp.biz.vo.res.Res4GetCourzeVo;
import com.shenmintech.cbp.biz.vo.res.Sons4GetComVo;
import com.shenmintech.cbp.biz.vo.res.Sons4GetCourseVo;
import com.shenmintech.cbp.controller.bean.req.Req4GetCourseBean;
import com.shenmintech.cbp.controller.bean.req.Req4GetCourseTableBean;
import com.shenmintech.cbp.controller.bean.req.Req4PostCourseBean;
import com.shenmintech.cbp.controller.bean.req.Req4PutCourseTableBean;
import com.shenmintech.cbp.controller.bean.res.Res4CompanyBean;
import com.shenmintech.cbp.controller.bean.res.Res4CourseTypeBean;
import com.shenmintech.cbp.controller.bean.res.Res4GetCourseBean;
import com.shenmintech.cbp.controller.bean.res.Res4GetCourseTableBean;
import com.shenmintech.cbp.controller.bean.res.Res4GetCourseTypeAndCompanyBean;
import com.shenmintech.cbp.controller.bean.res.Res4PostCourseBean;
import com.shenmintech.cbp.controller.bean.res.Res4PutCourseTableBean;
import com.shenmintech.cbp.controller.bean.res.Son4GetCourseBean;
import com.shenmintech.cbp.controller.bean.res.Son4GetCourseTableBean;
import com.shenmintech.cbp.exception.ApplicationException;
import com.shenmintech.cbp.service.IClazzService;
import com.shenmintech.cbp.service.ICompanyService;
import com.shenmintech.cbp.service.ICourseService;
import com.shenmintech.cbp.service.IGroupService;
import com.shenmintech.cbp.service.IStudentService;
import com.shenmintech.common.util.DateUtil;
import com.shenmintech.common.util.StringUtil;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@SuppressWarnings("static-access")
public class CourseBizImpl implements ICourseBiz {

	@Autowired
	ICourseService iCourseService;
	
	@Autowired
	ICompanyService iCompanyService;
	
	@Autowired
	IGroupService iGroupService;
	
	@Autowired
	IStudentService iStudentService;
	
	@Autowired
	IClazzService iClazzService;
	
	@Override
	public Res4PostCourseBean addCourse(Req4PostCourseBean req4PostCourseBean) {
		Res4PostCourseBean res4PostCourseBean = new Res4PostCourseBean();
		String companyId = req4PostCourseBean.getCompanyFid();
		String courseTypeId = req4PostCourseBean.getCourseTypeFid();
		String teacherId = req4PostCourseBean.getTeacherFid();
		String courseName = req4PostCourseBean.getCourseName();
		if(StringUtil.checkBlank(companyId,courseTypeId,teacherId,courseName)){
			res4PostCourseBean.setError(-1);
			res4PostCourseBean.setMsg("companyId,courseTypeId,teacherId,courseName不可为空");
			res4PostCourseBean.setSuccess(false);
			return res4PostCourseBean;
		}
		Req4PostCourseVo courseVo = new Req4PostCourseVo().builder()
				.companyId(companyId)
				.courseTypeId(courseTypeId)
				.teacherId(teacherId)
				.courseName(courseName)
				.build();
		List<Req4PostCourseVo> list = new ArrayList<>();
		list.add(courseVo);
		try {
			iCourseService.add(list);
		} catch (ApplicationException e) {
			log.error("context", e);
			res4PostCourseBean.setError(-1);
			res4PostCourseBean.setMsg(e.msg);
			res4PostCourseBean.setSuccess(false);
			return res4PostCourseBean;
		}
		res4PostCourseBean.setError(-1);
		res4PostCourseBean.setMsg("SUCCESS");
		res4PostCourseBean.setSuccess(true);
		return res4PostCourseBean;
	}

	@Override
	public Res4GetCourseTypeAndCompanyBean selectCourseTypeAndCompanies() {
		Res4GetCourseTypeAndCompanyBean res4GetCourseTypeAndCompanyBean = new Res4GetCourseTypeAndCompanyBean();
		
		List<Res4CourseTypeVo> res4CourseTypeVos = new ArrayList<>();
		try {
			res4CourseTypeVos = iCourseService.selectCourseType();
		} catch (ApplicationException e) {
			log.error("context", e);
			res4GetCourseTypeAndCompanyBean.setError(-1);
			res4GetCourseTypeAndCompanyBean.setMsg(e.msg);
			res4GetCourseTypeAndCompanyBean.setSuccess(false);
			return res4GetCourseTypeAndCompanyBean;
		}
		Iterator<Res4CourseTypeVo> it = res4CourseTypeVos.iterator();
		List<Res4CourseTypeBean> res4CourseTypeBeans = new ArrayList<>();
		while (it.hasNext()) {
			Res4CourseTypeBean res4CourseTypeBean = new Res4CourseTypeBean();
			Res4CourseTypeVo res4CourseTypeVo = it.next();
			res4CourseTypeBean.setTypeId(res4CourseTypeVo.getId());
			res4CourseTypeBean.setTypeName(res4CourseTypeVo.getTypeName());
			res4CourseTypeBeans.add(res4CourseTypeBean);
		}
		res4GetCourseTypeAndCompanyBean.setCourseTypeList(res4CourseTypeBeans);
		
		Res4GetComVo res4GetComVo = new Res4GetComVo();
		try {
			res4GetComVo = iCompanyService.select(1,99999);
		} catch (ApplicationException e) {
			log.error("context", e);
			res4GetCourseTypeAndCompanyBean.setError(-1);
			res4GetCourseTypeAndCompanyBean.setMsg(e.msg);
			res4GetCourseTypeAndCompanyBean.setSuccess(false);
			return res4GetCourseTypeAndCompanyBean;
		}
		List<Sons4GetComVo> sons4GetComVos = res4GetComVo.getList();
		Iterator<Sons4GetComVo> ite = sons4GetComVos.iterator();
		List<Res4CompanyBean> res4CompanyBeans = new ArrayList<>();
		while (ite.hasNext()) {
			Res4CompanyBean res4CompanyBean = new Res4CompanyBean();
			Sons4GetComVo sons4GetComVo = ite.next();
			String companyId = sons4GetComVo.getId();
			res4CompanyBean.setCompanyId(companyId);
			String companyName  = sons4GetComVo.getCompanyName();
			res4CompanyBean.setCompanyName(companyName);
			res4CompanyBeans.add(res4CompanyBean);
		}
		res4GetCourseTypeAndCompanyBean.setCompanyList(res4CompanyBeans);
		
		res4GetCourseTypeAndCompanyBean.setError(0);
		res4GetCourseTypeAndCompanyBean.setMsg("SUCCESS");
		res4GetCourseTypeAndCompanyBean.setSuccess(true);
		return res4GetCourseTypeAndCompanyBean;
	}

	@Override
	public Res4GetCourseBean selectCourseById(Req4GetCourseBean req4GetCourseBean) {
		Res4GetCourseBean res4GetCourseBean = new Res4GetCourseBean();
		String teacherId = req4GetCourseBean.getTeacherId();
		if(StringUtil.isBlank(teacherId)){
			res4GetCourseBean.setError(-1);
			res4GetCourseBean.setMsg("teacherId不可为空");
			res4GetCourseBean.setSuccess(false);
			return res4GetCourseBean;
		}
		int pageNo = -1==req4GetCourseBean.getPageNo()?1:req4GetCourseBean.getPageNo();
		int rowsPerPage = -1==req4GetCourseBean.getPageNo()?99999:req4GetCourseBean.getRowsPerPage();
		Res4GetCourseVo res4GetCourseVo = new Res4GetCourseVo();
		try {
			res4GetCourseVo = iCourseService.selectByTeacherIdPages(teacherId, pageNo, rowsPerPage);
		} catch (ApplicationException e) {
			log.error("context", e);
			res4GetCourseBean.setError(-1);
			res4GetCourseBean.setMsg(e.msg);
			res4GetCourseBean.setSuccess(false);
			return res4GetCourseBean;
		}
		List<Sons4GetCourseVo> sons4GetCourseVos = res4GetCourseVo.getList();
		Iterator<Sons4GetCourseVo> it = sons4GetCourseVos.iterator();
		List<Son4GetCourseBean> list = new ArrayList<>();
		while(it.hasNext()){
			Son4GetCourseBean son4GetCourseBean = new Son4GetCourseBean();
			Sons4GetCourseVo sons4GetCourseVo = it.next();
			String courseId = sons4GetCourseVo.getId();
			son4GetCourseBean.setCourseId(courseId);
			son4GetCourseBean.setCourseName(sons4GetCourseVo.getCourseName());
			String companyFid = sons4GetCourseVo.getCompanyFid();
			String companyName = iCompanyService.selectNameById(companyFid);
			son4GetCourseBean.setCompanyName(companyName);
			Date createTime = sons4GetCourseVo.getCreateTime();
			String createTimeStr = DateUtil.format(createTime, DateUtil.DATETYPE_4);
			son4GetCourseBean.setCreateTime(createTimeStr);
			int groupCount = iGroupService.countByCourseId(courseId);
			son4GetCourseBean.setGroupCount(String.valueOf(groupCount));
			List<String> groupIds = iGroupService.getGroupIdsByCourseId(courseId);
			int studentCount = iStudentService.countByGroupIds(groupIds);
			son4GetCourseBean.setStudentCount(String.valueOf(studentCount));
			list.add(son4GetCourseBean);
		}
		int recordCount = res4GetCourseVo.getRecordCount();
		res4GetCourseBean.setError(0);
		res4GetCourseBean.setMsg("SUCCESS");
		res4GetCourseBean.setSuccess(true);
		res4GetCourseBean.setPageNo(pageNo);
		res4GetCourseBean.setRecordCount(recordCount);
		res4GetCourseBean.setPageSumCount((recordCount+rowsPerPage-1)/rowsPerPage);
		res4GetCourseBean.setList(list);
		return res4GetCourseBean;
	}
	
	@Override
	public Res4GetCourseTableBean selectByCourseId(Req4GetCourseTableBean req4GetCourseTableBean) {
		Res4GetCourseTableBean res4GetCourseTableBean = new Res4GetCourseTableBean();
		String id = req4GetCourseTableBean.getCourseId();
		if(StringUtil.isBlank(id)){
			res4GetCourseTableBean.setError(-1);
			res4GetCourseTableBean.setMsg("teacherId不可为空");
			res4GetCourseTableBean.setSuccess(false);
			return res4GetCourseTableBean;
		}
		List<Res4CourseTypeVo> res4CourseTypeVos = new ArrayList<>();
		try {
			res4CourseTypeVos = iCourseService.selectCourseType();
		} catch (ApplicationException e) {
			log.error("context", e);
			res4GetCourseTableBean.setError(-1);
			res4GetCourseTableBean.setMsg(e.msg);
			res4GetCourseTableBean.setSuccess(false);
			return res4GetCourseTableBean;
		}
		
		List<Res4CourseTypeBean> res4CourseTypeBeans = new ArrayList<>();//所有课程类型列表
		Iterator<Res4CourseTypeVo> it = res4CourseTypeVos.iterator();
		while (it.hasNext()) {
			Res4CourseTypeVo res4CourseTypeVo = it.next();
			Res4CourseTypeBean res4CourseTypeBean = new Res4CourseTypeBean();
			res4CourseTypeBean.setTypeId(res4CourseTypeVo.getId());
			res4CourseTypeBean.setTypeName(res4CourseTypeVo.getTypeName());
			res4CourseTypeBeans.add(res4CourseTypeBean);
		}
		res4GetCourseTableBean.setCourseTypeList(res4CourseTypeBeans);
		
		Res4GetCourzeVo res4GetCourzeVo = new Res4GetCourzeVo();//课程对象
		try {
			res4GetCourzeVo = iCourseService.selectByCourseId(id);
		} catch (ApplicationException e) {
			log.error("context", e);
			res4GetCourseTableBean.setError(-1);
			res4GetCourseTableBean.setMsg(e.msg);
			res4GetCourseTableBean.setSuccess(false);
			return res4GetCourseTableBean;
		}
		res4GetCourseTableBean.setCourseId(res4GetCourzeVo.getId());
		res4GetCourseTableBean.setCourseTypeId(res4GetCourzeVo.getCourseTypeId()); 
		res4GetCourseTableBean.setCourseName(res4GetCourzeVo.getCourseName());
		res4GetCourseTableBean.setRemark(res4GetCourzeVo.getRemark());
		
		List<Res4GetCourseTableVo> res4GetCourseTableVos = iCourseService.selectCourseTableByCourseId(id);//课程表对象列表
		List<Son4GetCourseTableBean> courseTableBeans = new ArrayList<>();
		Iterator<Res4GetCourseTableVo> iterator = res4GetCourseTableVos.iterator();
		while (iterator.hasNext()) {
			Res4GetCourseTableVo res4GetCourseTableVo = iterator.next();
			Son4GetCourseTableBean son4GetCourseTableBean = new Son4GetCourseTableBean();
			BeanUtils.copyProperties(res4GetCourseTableVo, son4GetCourseTableBean);
			courseTableBeans.add(son4GetCourseTableBean);
		}
		res4GetCourseTableBean.setCourseTableList(courseTableBeans);
		
		return res4GetCourseTableBean;
	}

	@Override
	public Res4PutCourseTableBean updateCourseTableById(Req4PutCourseTableBean req4PutCourseTableBean) {
		Res4PutCourseTableBean res4PutCourseTableBean = new Res4PutCourseTableBean();
		String courseId = req4PutCourseTableBean.getId();
		String courseTypeId = req4PutCourseTableBean.getCourseTypeFid();
		if(StringUtil.checkBlank(courseId,courseTypeId)){
			res4PutCourseTableBean.setError(-1);
			res4PutCourseTableBean.setMsg("courseId,courseTypeId不能为空");
			res4PutCourseTableBean.setSuccess(false);
			return res4PutCourseTableBean;
		}
		
		List<String> clazzList = req4PutCourseTableBean.getClazzList();
		if(null == clazzList){
			res4PutCourseTableBean.setError(-1);
			res4PutCourseTableBean.setMsg("课表clazzList必传");
			res4PutCourseTableBean.setSuccess(false);
			return res4PutCourseTableBean;
		}
		if(clazzList.size()>0 && clazzList.stream().anyMatch(n->StringUtil.isBlank(n))){
			res4PutCourseTableBean.setError(-1);
			res4PutCourseTableBean.setMsg("课的名字clazzName不能为空");
			res4PutCourseTableBean.setSuccess(false);
			return res4PutCourseTableBean;
		}
		String remark1 = req4PutCourseTableBean.getRemark();
		
		try {
			iCourseService.updateCourseTableById(courseId,courseTypeId,remark1,clazzList);
		} catch (ApplicationException e) {
			log.error("context", e);
			res4PutCourseTableBean.setError(-1);
			res4PutCourseTableBean.setMsg(e.msg);
			res4PutCourseTableBean.setSuccess(false);
			return res4PutCourseTableBean;
		}
		res4PutCourseTableBean.setError(0);
		res4PutCourseTableBean.setMsg("SUCCESS");
		res4PutCourseTableBean.setSuccess(true);
		return res4PutCourseTableBean;
	}
	
}
