package com.shenmintech.cbp.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.LocalDate;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.shenmintech.base.template.IdWorkerTemplate;
import com.shenmintech.cbp.biz.vo.res.HomeWorkTypesVo;
import com.shenmintech.cbp.biz.vo.res.HomeworkVo;
import com.shenmintech.cbp.biz.vo.res.RelationVo;
import com.shenmintech.cbp.biz.vo.res.Res4GetHomeworkTypeVo;
import com.shenmintech.cbp.biz.vo.res.Res4GetHomeworkVo;
import com.shenmintech.cbp.biz.vo.res.Son4GetHomeworkTypeVo;
import com.shenmintech.cbp.biz.vo.res.Son4GetHomeworkVo;
import com.shenmintech.cbp.controller.bean.req.Req4AppPostHomeworkSignCardBean;
import com.shenmintech.cbp.controller.bean.req.Req4AppPostHomeworkSignCardVoBean;
import com.shenmintech.cbp.controller.bean.req.Req4AppPostHomeworkWorkCardBean;
import com.shenmintech.cbp.controller.bean.req.Req4AppPostHomeworkWorkCardVoBean;
import com.shenmintech.cbp.entity.PagingExample;
import com.shenmintech.cbp.entity.TKcCourseTableGroupRelation;
import com.shenmintech.cbp.entity.TKcCourseTableGroupRelationExample;
import com.shenmintech.cbp.entity.TKcHomework;
import com.shenmintech.cbp.entity.TKcHomeworkCardSelection;
import com.shenmintech.cbp.entity.TKcHomeworkCardSelectionExample;
import com.shenmintech.cbp.entity.TKcHomeworkExample;
import com.shenmintech.cbp.entity.TKcHomeworkPicTxt;
import com.shenmintech.cbp.entity.TKcHomeworkPicTxtExample;
import com.shenmintech.cbp.entity.TKcHomeworkSignCard;
import com.shenmintech.cbp.entity.TKcHomeworkSignCardExample;
import com.shenmintech.cbp.entity.TKcHomeworkStudentRelation;
import com.shenmintech.cbp.entity.TKcHomeworkStudentRelationExample;
import com.shenmintech.cbp.entity.TKcHomeworkTask;
import com.shenmintech.cbp.entity.TKcHomeworkType;
import com.shenmintech.cbp.entity.TKcHomeworkTypeExample;
import com.shenmintech.cbp.entity.TKcHomeworkWorkCard;
import com.shenmintech.cbp.entity.TKcHomeworkWorkCardExample;
import com.shenmintech.cbp.entity.TKcStudent;
import com.shenmintech.cbp.entity.TKcTeacher;
import com.shenmintech.cbp.exception.ApplicationException;
import com.shenmintech.cbp.mapper.TKcCourseTableGroupRelationMapper;
import com.shenmintech.cbp.mapper.TKcHomeworkCardSelectionMapper;
import com.shenmintech.cbp.mapper.TKcHomeworkMapper;
import com.shenmintech.cbp.mapper.TKcHomeworkPicTxtMapper;
import com.shenmintech.cbp.mapper.TKcHomeworkSignCardMapper;
import com.shenmintech.cbp.mapper.TKcHomeworkStudentRelationMapper;
import com.shenmintech.cbp.mapper.TKcHomeworkTaskMapper;
import com.shenmintech.cbp.mapper.TKcHomeworkTypeMapper;
import com.shenmintech.cbp.mapper.TKcHomeworkWorkCardMapper;
import com.shenmintech.cbp.mapper.TKcStudentMapper;
import com.shenmintech.cbp.mapper.TKcTeacherMapper;
import com.shenmintech.cbp.service.IHomeWorkService;
import com.shenmintech.common.util.Constants;
import com.shenmintech.common.util.DateUtil;
import com.shenmintech.common.util.StringUtil;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@Transactional
public class HomeWorkServiceImpl implements IHomeWorkService {

	@Autowired
	TKcHomeworkTypeMapper tKcHomeworkTypeMapper;

	@Autowired
	TKcTeacherMapper tKcTeacherMapper;

	@Autowired
	TKcHomeworkMapper tKcHomeworkMapper;

	@Autowired
	IdWorkerTemplate idWorkerTemplate;

	@Autowired
	TKcHomeworkStudentRelationMapper tKcHomeworkStudentRelationMapper;

	@Autowired
	TKcHomeworkPicTxtMapper tKcHomeworkPicTxtMapper;

	@Autowired
	TKcHomeworkWorkCardMapper tKcHomeworkWorkCardMapper;

	@Autowired
	TKcHomeworkSignCardMapper tKcHomeworkSignCardMapper;

	@Autowired
	TKcHomeworkCardSelectionMapper tKcHomeworkCardSelectionMapper;

	@Autowired
	TKcHomeworkTaskMapper tKcHomeworkTaskMapper;
	
	@Autowired
	TKcStudentMapper tKcStudentMapper;
	
	@Autowired
	TKcCourseTableGroupRelationMapper tKcCourseTableGroupRelationMapper;
	
	@Override
	public Res4GetHomeworkTypeVo selectHomeworkType() {
		Res4GetHomeworkTypeVo res4GetHomeworkTypeVo = new Res4GetHomeworkTypeVo();
		TKcHomeworkTypeExample example = new TKcHomeworkTypeExample();
		example.or().andStatusNotEqualTo(-1);
		List<TKcHomeworkType> homeworkTypes = tKcHomeworkTypeMapper.selectByExample(example);
		Iterator<TKcHomeworkType> it = homeworkTypes.iterator();
		List<Son4GetHomeworkTypeVo> homeworkTypeVos = new ArrayList<>();
		while (it.hasNext()) {
			TKcHomeworkType homeworkType = it.next();
			String typeId = homeworkType.getId();
			String typeName = homeworkType.getTypeName();
			Son4GetHomeworkTypeVo son4GetHomeworkTypeVo =
					Son4GetHomeworkTypeVo.builder().homeWorkTypeId(typeId).typeName(typeName).build();
			homeworkTypeVos.add(son4GetHomeworkTypeVo);
		}
		res4GetHomeworkTypeVo.setHomeworkTypeVos(homeworkTypeVos);
		return res4GetHomeworkTypeVo;
	}

	@Override
	public void add(String teacherId, String workName, String typeId, String describe) {
		TKcTeacher teacher = tKcTeacherMapper.selectByPrimaryKey(teacherId);
		if (null == teacher) throw new ApplicationException(Constants.META_STATUS_CODE_D1,
				"添加课程失败:t_kc_teacher中没有id为" + teacherId + "的记录", Constants.BLANKSTR);
		TKcHomeworkType homeworkType = tKcHomeworkTypeMapper.selectByPrimaryKey(typeId);
		if (null == homeworkType) throw new ApplicationException(Constants.META_STATUS_CODE_D1,
				"添加课程失败:t_kc_homeworktype中没有id为" + typeId + "的记录", Constants.BLANKSTR);
		TKcHomework homework = new TKcHomework();
		String id = idWorkerTemplate.generateId();
		homework.setId(id);
		homework.setTeacherFid(teacherId);
		homework.setWorkName(workName);
		homework.setWorkTypeFid(typeId);
		homework.setWorkDescribe(describe);
		homework.setStatus(0);
		try {
			tKcHomeworkMapper.insertSelective(homework);
		} catch (Exception e) {
			log.error("context", e);
			throw new ApplicationException(Constants.META_STATUS_CODE_D1, "添加任务失败", Constants.BLANKSTR);
		}
	}

	@SuppressWarnings("static-access")
	@Override
	public Res4GetHomeworkVo selectByTeacherIdPages(String teacherId, int pageNo, int rowsPerPage) {
		Res4GetHomeworkVo res4GetHomeworkVo = new Res4GetHomeworkVo();
		TKcHomeworkExample homeworkExample = new TKcHomeworkExample();
		homeworkExample.or().andStatusNotEqualTo(-1).andTeacherFidEqualTo(teacherId);
		int recordCount = tKcHomeworkMapper.countByExample(homeworkExample);
		PagingExample pagingExample = new PagingExample(pageNo, rowsPerPage);
		homeworkExample.setPagingExample(pagingExample);
		homeworkExample.setOrderByClause("create_time desc");
		List<TKcHomework> homeworks = tKcHomeworkMapper.selectByExample(homeworkExample);
		Iterator<TKcHomework> it = homeworks.iterator();
		List<Son4GetHomeworkVo> homeworkTypeVos = new ArrayList<>();
		while (it.hasNext()) {
			TKcHomework homework = it.next();
			String homeworkName = homework.getWorkName();
			String homeworkTypeId = homework.getWorkTypeFid();
			String describe = homework.getWorkDescribe();
			Date createDate = homework.getCreateTime();
			Integer status = homework.getStatus();
			Son4GetHomeworkVo son4GetHomeworkVo = new Son4GetHomeworkVo().builder()
					.homeworkId(homework.getId()).homeworkName(null == homeworkName ? "" : homeworkName)
					.homeworkTypeId(null == homeworkTypeId ? "" : homeworkTypeId)
					.describe(null == describe ? "" : describe).createTime(createDate)
					.status(status)
					.build();
			homeworkTypeVos.add(son4GetHomeworkVo);
		}
		res4GetHomeworkVo.setHomeworkTypeVos(homeworkTypeVos);
		res4GetHomeworkVo.setRecordCount(recordCount);
		return res4GetHomeworkVo;
	}

	@Override
	public void deleteById(String workId) {
		TKcHomework homework = tKcHomeworkMapper.selectByPrimaryKey(workId);
		if (null == homework) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"删除任务失败:t_kc_homework中没有id为" + workId + "的记录", Constants.BLANKSTR);
		int status = homework.getStatus();
		if (-1 == status) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"删除任务失败:t_kc_homework中没有id为" + workId + "的记录已经被删除，不可重复删除", Constants.BLANKSTR);
		TKcHomeworkExample example = new TKcHomeworkExample();
		example.or().andIdEqualTo(workId).andStatusEqualTo(0);
		TKcHomework curHomework = new TKcHomework();
		curHomework.setStatus(-1);
		int i = tKcHomeworkMapper.updateByExampleSelective(curHomework, example);
		if(i!=1) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"初始状态id为"+workId+"的课后作业数量不存在或者不唯一,删除失败", Constants.BLANKSTR);
	}

	@Override
	public void updateById(String workId, String workName, String typeId, String describe) {
		TKcHomework homework = tKcHomeworkMapper.selectByPrimaryKey(workId);
		if (null == homework) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"更新任务失败:t_kc_homework中没有id为" + workId + "的记录", Constants.BLANKSTR);
		TKcHomeworkType homeworkType = tKcHomeworkTypeMapper.selectByPrimaryKey(typeId);
		if (null == homeworkType) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"更新课程失败:t_kc_homeworktype中没有id为" + typeId + "的记录", Constants.BLANKSTR);
		TKcHomeworkExample example = new TKcHomeworkExample();
		example.or().andIdEqualTo(workId).andStatusEqualTo(0);
		TKcHomework curHomework = new TKcHomework();
		curHomework.setWorkName(workName);
		curHomework.setWorkTypeFid(typeId);
		curHomework.setWorkDescribe(describe);
		int i = tKcHomeworkMapper.updateByExampleSelective(curHomework, example);
		if(i!=1) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"初始状态id为"+workId+"的课后作业数量不存在或者不唯一,修改失败", Constants.BLANKSTR);
	}

	@Override
	public List<HomeWorkTypesVo> getHomeWorkTypesByIds(List<String> list) {
		List<HomeWorkTypesVo> workTypesVos = new ArrayList<>();
		TKcHomeworkTypeExample example = new TKcHomeworkTypeExample();
		example.or().andStatusNotEqualTo(-1).andIdIn(list);
		List<TKcHomeworkType> tKcHomeworkTypes = tKcHomeworkTypeMapper.selectByExample(example);
		Iterator<TKcHomeworkType> it = tKcHomeworkTypes.iterator();
		while (it.hasNext()) {
			HomeWorkTypesVo homeWorkTypesVo = new HomeWorkTypesVo();
			TKcHomeworkType homeworkType = it.next();
			String id = homeworkType.getId();
			String name = homeworkType.getTypeName();
			homeWorkTypesVo.setId(id);
			homeWorkTypesVo.setTypeName(null == name ? "" : name);
			workTypesVos.add(homeWorkTypesVo);
		}
		return workTypesVos;
	}

	@SuppressWarnings("deprecation")
@Override
	public List<RelationVo> selectHomeworksByStudentIds(String id) {
		List<RelationVo> list = new ArrayList<>();
		
		TKcStudent student = tKcStudentMapper.selectByPrimaryKey(id);
		String groupId = student.getGroupFid();//当前学生的小组归属
		TKcCourseTableGroupRelationExample tKcCourseTableGroupRelationExample = new TKcCourseTableGroupRelationExample();
		tKcCourseTableGroupRelationExample.or().andStatusNotEqualTo(-1).andGroupFidEqualTo(groupId);
		List<TKcCourseTableGroupRelation> groupRelations = tKcCourseTableGroupRelationMapper.selectByExample(tKcCourseTableGroupRelationExample);
		
		Date nowTime = new Date();
		TKcHomeworkStudentRelationExample example = new TKcHomeworkStudentRelationExample();
		example.or().andStatusNotEqualTo(-1).andStudentFidEqualTo(id);// 课后任务可以推送至公司，班级，小组任意一个层面，但是最终是根据小组来排查计算的,目前还是把所有的任务都查出来
		example.setOrderByClause("create_time desc");
		List<TKcHomeworkStudentRelation> relations = tKcHomeworkStudentRelationMapper.selectByExample(example);
		Iterator<TKcHomeworkStudentRelation> it = relations.iterator();
		while (it.hasNext()) {
			RelationVo relationVo = new RelationVo();// 当前作业
			TKcHomeworkStudentRelation relation = it.next();
			/**过滤掉不需要显示的过期任务**/
			String taskId = relation.getTaskFid();//当前作业由这个task推送
			TKcHomeworkTask task = tKcHomeworkTaskMapper.selectByPrimaryKey(taskId);
			String clazzId = task.getClazzFid();//当前推送的课程表上的课id
			Date pStartTime = groupRelations.stream().filter(n->clazzId.equals(n.getCourseTableFid())).findAny().get().getPreStartTime();//当前这节课的开始时间
			List<TKcCourseTableGroupRelation> tableGroupRelations = groupRelations.stream().filter(n->1==n.getPreStartTime().compareTo(pStartTime)).collect(Collectors.toList());
			boolean flag = true;
			Date nextClazzSTime = new Date();
			if(null==tableGroupRelations||0==tableGroupRelations.size()) flag = false;
				else nextClazzSTime = tableGroupRelations.stream().sorted((p1,p2)->p1.getPreStartTime().compareTo(p2.getPreStartTime())).findFirst().get().getPreStartTime();//下节课开课时间
			String relaId = relation.getId();
			relationVo.setRelationId(relaId);
			String homeworkId = relation.getHomeworkFid();
			TKcHomework homework = tKcHomeworkMapper.selectByPrimaryKey(homeworkId);
			String workName = homework.getWorkName();
			relationVo.setRelationName(workName);
			String homeworkTypeId = homework.getWorkTypeFid();
			/**只有图文任务和打卡任务在下节课开始之后不显示之前的任务**/
			if(flag && (homeworkTypeId.equals("1")||homeworkTypeId.equals("2")) && 1==nowTime.compareTo(nextClazzSTime)) continue;
			
			relationVo.setHomeworkTypeId(homeworkTypeId);
			TKcHomeworkType homeworkType = tKcHomeworkTypeMapper.selectByPrimaryKey(homeworkTypeId);
			relationVo.setHomeworkTypeName(homeworkType.getTypeName());
			
			Integer status = 0;
			StringBuffer describe = new StringBuffer("");// 作业状态
			switch (homeworkTypeId) {
			//------------------
				case "1"://图文
					TKcHomeworkPicTxtExample txtExample = new TKcHomeworkPicTxtExample();
					txtExample.or().andStatusNotEqualTo(-1).andHomeworkStudentRelationFidEqualTo(relaId);
					List<TKcHomeworkPicTxt> ptList = tKcHomeworkPicTxtMapper.selectByExample(txtExample);
					if(null==ptList||1!=ptList.size()) throw new ApplicationException("-1", "图文类任务对应类型表不存在或者不唯一", Constants.BLANKSTR);
					TKcHomeworkPicTxt homeworkPicTxt = ptList.get(0);
					String picId = homeworkPicTxt.getPicId();
					if(StringUtil.isNotBlank(picId)) {
						status = 1;
						describe.append("已完成");
					}else {
						Date createDate = homeworkPicTxt.getCreateTime();// 创建时间
						Calendar cal = Calendar.getInstance();
						cal.setTime(createDate);
						cal.add(Calendar.DATE, 7);//默认7天完成作业
						Date endTime = cal.getTime();
						long[] deltaTimes = DateUtil.getDistanceTimes(nowTime, endTime);
						describe.append("剩余 ");
						if (0l != deltaTimes[0]) describe.append(deltaTimes[0]).append("天");
						if (0l != deltaTimes[1]) describe.append(deltaTimes[1]).append("小时");
						if (0l != deltaTimes[2]) describe.append(deltaTimes[2]).append("分");
					}
				break;
			//------------------
				case "2"://打卡
					String mmdd = DateUtil.format(nowTime, DateUtil.DATETYPE_13);
					TKcHomeworkSignCardExample signCardExample = new TKcHomeworkSignCardExample();
					signCardExample.or().andStatusNotEqualTo(-1).andHomeworkStudentRelationFidEqualTo(relaId).andMarkDateLike(mmdd+"%");
					List<TKcHomeworkSignCard> homeworkSignCards = tKcHomeworkSignCardMapper.selectByExample(signCardExample);
					if(null==homeworkSignCards||1!=homeworkSignCards.size()){
						describe.append("未开始");
						break;
					}
					TKcHomeworkSignCard homeworkSignCard = homeworkSignCards.get(0);
					Integer breakfast = homeworkSignCard.getBreakfastFlag();
					Integer lunch = homeworkSignCard.getLunchFlag();
					Integer supper = homeworkSignCard.getSupperFlag();
					Integer dw = homeworkSignCard.getDrinkWater();
					if(null!=breakfast&&1==breakfast//吃了早饭
							&&null!=lunch&&1==lunch//吃了午饭
							&&null!=supper&&1==supper//吃了晚饭
							&&null!=dw&&1==dw//喝了水
							){
						status = 1;
						describe.append("已完成");
					}else {
						describe.append("未完成");
					}
				break;
			//------------------
				case "3"://选卡片
					DateTime dateTime = new DateTime(nowTime);
					DateTime oneWeekAgoWithDay = dateTime.minusWeeks(1);
					String bef = DateUtil.format(oneWeekAgoWithDay.toDate(),DateUtil.DATETYPE_1);//当前时间的一周前
					String aft = DateUtil.format(nowTime,DateUtil.DATETYPE_1);//当前时间
					TKcHomeworkWorkCardExample workCardExample = new TKcHomeworkWorkCardExample();
					workCardExample.or().andStatusNotEqualTo(-1).andHomeworkStudentRelationFidEqualTo(relaId).andRemark1Between(bef,aft);
					List<TKcHomeworkWorkCard> workCards= tKcHomeworkWorkCardMapper.selectByExample(workCardExample);
					if(null!=workCards&&1==workCards.size()){
						TKcHomeworkWorkCard homeworkWorkCard = workCards.get(0);
						String sel = homeworkWorkCard.getSelections();
						String tar = homeworkWorkCard.getCurrentWeekTarget();
						String res = homeworkWorkCard.getCurrentWeekResult();
						if(StringUtil.isNotBlank(sel)
							&&StringUtil.isNotBlank(tar)
							&&StringUtil.isNotBlank(res)
							){
							status = 1;
							describe.append("已完成");
						}else{
							String preStartTimeStr = homeworkWorkCard.getRemark1();
							Integer year = null;
							Integer month = null;
							Integer day = null;
							Integer hour = null;
							Integer min = null;
							Integer second = null;
							try {
								year = Integer.parseInt(DateUtil.stringToString(preStartTimeStr, DateUtil.DATETYPE_1, DateUtil.DATETYPE_15));
								month = Integer.parseInt(DateUtil.stringToString(preStartTimeStr, DateUtil.DATETYPE_1, DateUtil.DATETYPE_16));
								day = Integer.parseInt(DateUtil.stringToString(preStartTimeStr, DateUtil.DATETYPE_1, DateUtil.DATETYPE_17));
								hour = Integer.parseInt(DateUtil.stringToString(preStartTimeStr, DateUtil.DATETYPE_1, DateUtil.DATETYPE_18));
								min = Integer.parseInt(DateUtil.stringToString(preStartTimeStr, DateUtil.DATETYPE_1, DateUtil.DATETYPE_19));
								second = Integer.parseInt(DateUtil.stringToString(preStartTimeStr, DateUtil.DATETYPE_1, DateUtil.DATETYPE_20));
							} catch (Exception e) {
								throw new ApplicationException("-1", "格式转化出错", Constants.BLANKSTR);
							}
							
							DateTime psDate =new DateTime(year, month, day, hour, min,second);
							DateTime sevenDaysAfter = psDate.plusDays(7);
							
							Integer nowYear = null;
							Integer nowMonth = null;
							Integer nowDay = null;
							try {
								nowYear = Integer.parseInt(DateUtil.format(nowTime, DateUtil.DATETYPE_15));
								nowMonth = Integer.parseInt(DateUtil.format(nowTime, DateUtil.DATETYPE_16));
								nowDay = Integer.parseInt(DateUtil.format(nowTime, DateUtil.DATETYPE_17));
							} catch (Exception e) {
								throw new ApplicationException("-1", "格式转化出错", Constants.BLANKSTR);
							}
							LocalDate start=new LocalDate(nowYear,nowMonth,nowDay); 
							int days = Days.daysBetween(start, sevenDaysAfter.toYearMonthDay()).getDays();
							describe.append("剩余 "+ days +"天");
						}
					}else{
						describe.append("未开始");
					}
				break;
			//------------------
				default:
					
				break;
			//------------------
			}
			relationVo.setStatusFlag(status.toString());
			relationVo.setRemainDescribe(describe.toString());
			list.add(relationVo);
		}
		return list;
	}

	@Override
	public List<TKcHomeworkPicTxt> selectHomeworkPicTxtByRaleationId(String id) {
		TKcHomeworkPicTxtExample example = new TKcHomeworkPicTxtExample();
		example.or().andStatusNotEqualTo(-1).andHomeworkStudentRelationFidEqualTo(id);
		example.setOrderByClause("create_time desc");
		List<TKcHomeworkPicTxt> results = tKcHomeworkPicTxtMapper.selectByExample(example);
		return results;
	}

	@Override
	public List<TKcHomeworkWorkCard> selecHomeworkWorkCardByRaleationId(String id) {
		TKcHomeworkWorkCardExample example = new TKcHomeworkWorkCardExample();
		example.or().andStatusNotEqualTo(-1).andHomeworkStudentRelationFidEqualTo(id);
		example.setOrderByClause("remark1");
		List<TKcHomeworkWorkCard> results = tKcHomeworkWorkCardMapper.selectByExample(example);
		return results;
	}

	@Override
	public List<TKcHomeworkSignCard> selecHomeworkSignCardByRaleationId(String id) {
		TKcHomeworkSignCardExample example = new TKcHomeworkSignCardExample();
		example.or().andStatusNotEqualTo(-1).andHomeworkStudentRelationFidEqualTo(id);
		example.setOrderByClause("create_time desc");
		List<TKcHomeworkSignCard> results = tKcHomeworkSignCardMapper.selectByExample(example);
		return results;
	}

	@Override
	public void updateTKcHomeworkPicTxt(TKcHomeworkPicTxt bean) {
		int i = 0;
		try {
			i = tKcHomeworkPicTxtMapper.updateByPrimaryKeySelective(bean);
		} catch (Exception e) {
			throw new ApplicationException(Constants.META_STATUS_CODE_D1, "更新任务失败", Constants.BLANKSTR);
		}
		if(1!=i) throw new ApplicationException(Constants.META_STATUS_CODE_D1, "id为"+bean.getId()+"的图文任务不存在或者不唯一", Constants.BLANKSTR);
		
	}

	@Override
	public void updateTKcHomeworkWorkCard(
			Req4AppPostHomeworkWorkCardBean req4AppPostHomeworkWorkCardBean) {
		try {
			Iterator<Req4AppPostHomeworkWorkCardVoBean> it = req4AppPostHomeworkWorkCardBean.getList().iterator();
			Date now = new Date();
			while (it.hasNext()) {
				Req4AppPostHomeworkWorkCardVoBean req = it.next();
				TKcHomeworkWorkCard workCard = tKcHomeworkWorkCardMapper.selectByPrimaryKey(req.getId());
				workCard.setSelections(req.getSelections());
				workCard.setUpdateTime(now);
				workCard.setCurrentWeekTarget(req.getCurrentWeekTarget());
				workCard.setCurrentWeekResult(req.getCurrentWeekResult());
				tKcHomeworkWorkCardMapper.updateByPrimaryKey(workCard);
			}
		} catch (Exception e) {
			log.error("context", e);
			throw new ApplicationException(Constants.META_STATUS_CODE_D1, "更新任务失败", Constants.BLANKSTR);
		}
	}

	@Override
	public void updateTKcHomeworkSignCard(Req4AppPostHomeworkSignCardBean req4AppPostHomeworkSignCardBean) {
		try {
			Iterator<Req4AppPostHomeworkSignCardVoBean> it = req4AppPostHomeworkSignCardBean.getList().iterator();
			Date now = new Date();
			while (it.hasNext()) {
				Req4AppPostHomeworkSignCardVoBean req = it.next();
				TKcHomeworkSignCard signCard = new TKcHomeworkSignCard();
				signCard.setId(req.getId());
				signCard.setBreakfastFlag(req.getBreakfastFlag());
				signCard.setLunchFlag(req.getLunchFlag());
				signCard.setSupperFlag(req.getSupperFlag());
				signCard.setDrinkWater(req.getDrinkWater());
				signCard.setUpdateTime(now);
				tKcHomeworkSignCardMapper.updateByPrimaryKeySelective(signCard);
			}
		} catch (Exception e) {
			log.error("context", e);
			throw new ApplicationException(Constants.META_STATUS_CODE_D1, "更新任务失败", Constants.BLANKSTR);
		}
	}

	@Override
	public String selectNameById(String id) {
		TKcHomework homework = tKcHomeworkMapper.selectByPrimaryKey(id);
		if (null == homework) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"未找到id=" + id + "的课后任务", Constants.BLANKSTR);
		return homework.getWorkName();
	}

	@Override
	public HomeworkVo selectById(String id) {
		TKcHomework homework = tKcHomeworkMapper.selectByPrimaryKey(id);
		if (null == homework) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"未找到id=" + id + "的课后任务", Constants.BLANKSTR);
		HomeworkVo vo = new HomeworkVo();
		BeanUtils.copyProperties(homework, vo);
		return vo;
	}

	@Override
	public TKcHomework selectHomeWorkByRelationId(String relationId) {
		TKcHomeworkStudentRelation tRelation = tKcHomeworkStudentRelationMapper.selectByPrimaryKey(relationId);
		if (null == tRelation) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"未找到id=" + relationId + "的课后任务", Constants.BLANKSTR);
		TKcHomework homework = tKcHomeworkMapper.selectByPrimaryKey(tRelation.getHomeworkFid());
		if (null == homework) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"未找到id=" + tRelation.getId() + "的课后任务", Constants.BLANKSTR);
		return homework;
	}

	@Override
	public List<TKcHomeworkCardSelection> selectSelection() {
		TKcHomeworkCardSelectionExample example = new TKcHomeworkCardSelectionExample();
		example.or().andStatusNotEqualTo(-1);
		List<TKcHomeworkCardSelection> list = tKcHomeworkCardSelectionMapper.selectByExample(example);
		return list;
	}

}
