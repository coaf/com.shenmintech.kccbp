package com.shenmintech.cbp.service.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.shenmintech.base.template.IdWorkerTemplate;
import com.shenmintech.cbp.biz.vo.res.Res4GetEmployeeVo;
import com.shenmintech.cbp.biz.vo.res.Son4GetEmployeeVo;
import com.shenmintech.cbp.entity.PagingExample;
import com.shenmintech.cbp.entity.TKcCompany;
import com.shenmintech.cbp.entity.TKcCourse;
import com.shenmintech.cbp.entity.TKcEmployee;
import com.shenmintech.cbp.entity.TKcEmployeeExample;
import com.shenmintech.cbp.exception.ApplicationException;
import com.shenmintech.cbp.mapper.TKcCompanyMapper;
import com.shenmintech.cbp.mapper.TKcCourseMapper;
import com.shenmintech.cbp.mapper.TKcEmployeeMapper;
import com.shenmintech.cbp.mapper.TKcGroupMapper;
import com.shenmintech.cbp.mapper.TKcStudentMapper;
import com.shenmintech.cbp.service.IEmpolyeeService;
import com.shenmintech.common.util.Constants;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
@Transactional
public class EmpolyeeServiceImpl implements IEmpolyeeService{
	
	@Autowired
	TKcCompanyMapper tKcCompanyMapper;
	
	@Autowired
	TKcEmployeeMapper tKcEmployeeMapper;
	
	@Autowired
	TKcStudentMapper tKcStudentMapper;
	
	@Autowired
	TKcGroupMapper tKcGroupMapper;
	
	@Autowired
	TKcCourseMapper tKcCourseMapper;
	
	@Autowired
	IdWorkerTemplate idWorkerTemplate;
	
	@Override
	public String addEmpolyee(String userId, String companyId) {
		//TODO:用户存在性验证待做
		TKcCompany company = tKcCompanyMapper.selectByPrimaryKey(companyId);
		if(null == company){
			throw new ApplicationException(Constants.META_STATUS_CODE_D1,"t_kc_company中未查到id为"+companyId+"的记录",Constants.BLANKSTR);
		}else{
			log.info("t_kc_company中id为"+companyId+"的公司记录存在，已验证");
		}
		TKcEmployeeExample employeeExample = new TKcEmployeeExample();
		employeeExample.or().andStatusNotEqualTo(-1).andUserIdEqualTo(userId);
		List<TKcEmployee> employeee = tKcEmployeeMapper.selectByExample(employeeExample);
		if(null != employeee && employeee.size()>0) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"t_kc_empolyee中已经存在userId为"+userId+"的员工记录,一个用户只能绑定一家公司",Constants.BLANKSTR);
		
		TKcEmployee employee = new TKcEmployee();
		String id = idWorkerTemplate.generateId();
		employee.setId(id);
		employee.setUserId(userId);
		employee.setCompanyFid(companyId);
		employee.setStatus(0);
		try {
			tKcEmployeeMapper.insertSelective(employee);
		} catch (Exception e) {
			log.error("context", e);
			throw new ApplicationException(Constants.META_STATUS_CODE_D1,"添加员工失败",Constants.BLANKSTR);
		}
		return id;
	}

	@Override
	public Res4GetEmployeeVo selectByCompanyId(int pageNo,int rowsPerPage,String courseId) {
		Res4GetEmployeeVo res4GetEmployeeVo = new Res4GetEmployeeVo();
		
		TKcCourse course = tKcCourseMapper.selectByPrimaryKey(courseId);
		if(null == course) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"t_kc_course表中不存在id为"+courseId+"的记录",Constants.BLANKSTR);
		String companyId = course.getCompanyFid();
		TKcEmployeeExample employeeExample = new TKcEmployeeExample();
		employeeExample.or().andStatusNotEqualTo(-1).andCompanyFidEqualTo(companyId);
		int recordCount = tKcEmployeeMapper.countByExample(employeeExample);
		PagingExample pagingExample = new PagingExample(pageNo, rowsPerPage);
		employeeExample.setPagingExample(pagingExample);
		List<TKcEmployee> employeee = tKcEmployeeMapper.selectByExample(employeeExample);
		
		Iterator<TKcEmployee> it = employeee.iterator();
		List<Son4GetEmployeeVo> list = new ArrayList<>();
		while (it.hasNext()) {
			Son4GetEmployeeVo son4GetEmployeeVo = new Son4GetEmployeeVo();
			TKcEmployee employee = it.next();
			String employeeId = employee.getId();
			son4GetEmployeeVo.setEmployeeId(null==employeeId?"":employeeId);
			String userId = employee.getUserId();
			son4GetEmployeeVo.setUserId(null==userId?"":userId);
			list.add(son4GetEmployeeVo);
		}
		res4GetEmployeeVo.setRecordCount(recordCount);
		res4GetEmployeeVo.setList(list);
		return res4GetEmployeeVo;
	}

	@Override
	public String selectByUserId(String userId) {
		TKcEmployeeExample example = new TKcEmployeeExample();
		example.or().andStatusNotEqualTo(-1).andUserIdEqualTo(userId);
		List<TKcEmployee> employees = tKcEmployeeMapper.selectByExample(example);
		if(1 < employees.size()) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"userId="+userId+"在表t_kc_employee中找到两条数据，一个用户之内能入职一家公司，故为脏数据",Constants.BLANKSTR);
		if(0 == employees.size()) throw new ApplicationException(Constants.META_STATUS_CODE_D1,"userId="+userId+"在表t_kc_employee中未找到该用户的雇员信息，请先扫码加入公司",Constants.BLANKSTR);
		return employees.get(0).getId();
	}
}
