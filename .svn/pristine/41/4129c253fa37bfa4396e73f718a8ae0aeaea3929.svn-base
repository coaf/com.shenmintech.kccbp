package com.shenmintech.cbp.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.shenmintech.cbp.biz.vo.CourseDoneFlag;
import com.shenmintech.cbp.biz.vo.res.Res4AppGetClazzVo;
import com.shenmintech.cbp.entity.TKcCourse;
import com.shenmintech.cbp.entity.TKcCourseTable;
import com.shenmintech.cbp.entity.TKcCourseTableGroupRelation;
import com.shenmintech.cbp.entity.TKcCourseTableGroupRelationExample;
import com.shenmintech.cbp.entity.TKcStudent;
import com.shenmintech.cbp.entity.TKcStudentExample;
import com.shenmintech.cbp.entity.TKcTeacher;
import com.shenmintech.cbp.exception.ApplicationException;
import com.shenmintech.cbp.mapper.TKcCourseMapper;
import com.shenmintech.cbp.mapper.TKcCourseTableGroupRelationMapper;
import com.shenmintech.cbp.mapper.TKcCourseTableMapper;
import com.shenmintech.cbp.mapper.TKcGroupMapper;
import com.shenmintech.cbp.mapper.TKcStudentMapper;
import com.shenmintech.cbp.mapper.TKcTeacherMapper;
import com.shenmintech.cbp.service.ICourse4AppService;
import com.shenmintech.common.util.Constants;
import com.shenmintech.common.util.DateUtil;

@Service
@Transactional
public class Course4AppServiceImpl implements ICourse4AppService {

  @Autowired
  TKcGroupMapper tKcGroupMapper;

  @Autowired
  TKcCourseMapper tKcCourseMapper;

  @Autowired
  TKcTeacherMapper tKcTeacherMapper;

  @Autowired
  TKcStudentMapper tKcStudentMapper;

  @Autowired
  TKcCourseTableMapper tKcCourseTableMapper;

  @Autowired
  TKcCourseTableGroupRelationMapper tKcCourseTableGroupRelationMapper;

  @SuppressWarnings("static-access")
  @Override
  public List<Res4AppGetClazzVo> selectByStudentIds(List<String> ids) {
    Date nowTime = new Date();// 现在的时间
    TKcStudentExample tKcStudentExample = new TKcStudentExample();
    tKcStudentExample.or().andStatusNotEqualTo(-1).andIdIn(ids);
    List<TKcStudent> tKcStudents = tKcStudentMapper.selectByExample(tKcStudentExample);
    List<String> groupIds =
        tKcStudents.stream().map(n -> n.getGroupFid()).collect(Collectors.toList());

    TKcCourseTableGroupRelationExample example = new TKcCourseTableGroupRelationExample();
    example.or().andStatusNotEqualTo(-1).andGroupFidIn(groupIds);
    example.setOrderByClause("pre_start_time desc");
    List<TKcCourseTableGroupRelation> tKcCourseTableGroupRelations =
        tKcCourseTableGroupRelationMapper.selectByExample(example);

    Iterator<TKcCourseTableGroupRelation> it = tKcCourseTableGroupRelations.iterator();
    List<Res4AppGetClazzVo> res4AppGetClazzVos = new ArrayList<>();
    while (it.hasNext()) {
      TKcCourseTableGroupRelation relation = it.next();
      String courseTableFid = relation.getCourseTableFid();
      TKcCourseTable courseTable = tKcCourseTableMapper.selectByPrimaryKey(courseTableFid);
      String clazzName = courseTable.getClazzName();// -----------------
      String courseFid = courseTable.getCourseFid();
      String picId = courseTable.getPicId();
      TKcCourse course = tKcCourseMapper.selectByPrimaryKey(courseFid);
      String courseTypeFid = course.getCourseTypeFid();
      String teacherId = course.getTeacherFid();
      TKcTeacher teacher = tKcTeacherMapper.selectByPrimaryKey(teacherId);
      String nickName = teacher.getNickName();// -----------------------
      Date preStartTime = relation.getPreStartTime();// 开课时间
      if (null == preStartTime) throw new ApplicationException(Constants.META_STATUS_CODE_D1,
          "课程relationId=" + courseTableFid + "未添加上课时间", Constants.BLANKSTR);
      boolean flag = nowTime.compareTo(preStartTime) < 0;
      String doneFlag = flag ? CourseDoneFlag.UNDONE.getCode() : CourseDoneFlag.DONE.getCode();
      String preTimeStr = DateUtil.format(preStartTime, DateUtil.DATETYPE_11);// -----
      String describe = "";// ------------------------------------------
      if (flag) {
        describe = DateUtil.deltaDate(nowTime, preStartTime);
      } else {
        describe = "已结束";
      }
      String ntesHttpPullUrl = relation.getNtesHttpPullUrl();
      String ntesRoomId = relation.getNtesRoomId();
      String ntesRoomName = relation.getNtesRoomName();
      String ntesRtmpPullUrl = relation.getNtesRtmpPullUrl();

      Res4AppGetClazzVo res4AppGetClazzVo = new Res4AppGetClazzVo().builder()
          .clazzId(courseTableFid).clazzName(clazzName).picId(picId).clazzTypeId(courseTypeFid)
          .nickName(nickName).doneFlag(doneFlag).tIndex(preStartTime).preStartTime(preTimeStr)
          .interval(describe).ntesHttpPullUrl(ntesHttpPullUrl).ntesRoomName(ntesRoomName)
          .ntesRoomId(ntesRoomId).ntesRtmpPullUrl(ntesRtmpPullUrl).build();
      res4AppGetClazzVos.add(res4AppGetClazzVo);
    }
    return res4AppGetClazzVos;
  }

}
