package com.shenmintech.cbp.biz.impl;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.shenmintech.cbp.biz.IRecordBiz;
import com.shenmintech.cbp.biz.vo.ques.Req4PostRecordVo;
import com.shenmintech.cbp.biz.vo.ques.Req4PutRecordVo;
import com.shenmintech.cbp.controller.bean.req.Req4DeleteRecordBean;
import com.shenmintech.cbp.controller.bean.req.Req4GetRecordsBean;
import com.shenmintech.cbp.controller.bean.req.Req4PatchIndexBean;
import com.shenmintech.cbp.controller.bean.req.Req4PostRecordBean;
import com.shenmintech.cbp.controller.bean.req.Req4PutRecordBean;
import com.shenmintech.cbp.controller.bean.req.Req4PutRecordStatusBean;
import com.shenmintech.cbp.controller.bean.req.ReqRecordAccount4AppBean;
import com.shenmintech.cbp.controller.bean.req.ReqRecords4AppBean;
import com.shenmintech.cbp.controller.bean.req.ReqRecordsByType4AppBean;
import com.shenmintech.cbp.controller.bean.res.RecordModel;
import com.shenmintech.cbp.controller.bean.res.RecordModel4App;
import com.shenmintech.cbp.controller.bean.res.RecordType;
import com.shenmintech.cbp.controller.bean.res.RecordTypeModel4App;
import com.shenmintech.cbp.controller.bean.res.Res4DeleteRecordBean;
import com.shenmintech.cbp.controller.bean.res.Res4GetRecordsBean;
import com.shenmintech.cbp.controller.bean.res.Res4PatchIndexBean;
import com.shenmintech.cbp.controller.bean.res.Res4PostRecordBean;
import com.shenmintech.cbp.controller.bean.res.Res4PutRecordBean;
import com.shenmintech.cbp.controller.bean.res.Res4PutRecordStatusBean;
import com.shenmintech.cbp.controller.bean.res.ResRecordAccount4AppBean;
import com.shenmintech.cbp.controller.bean.res.ResRecords4AppBean;
import com.shenmintech.cbp.controller.bean.res.ResRecordsByType4AppBean;
import com.shenmintech.cbp.entity.PagingExample;
import com.shenmintech.cbp.entity.TKcEmployeeExample;
import com.shenmintech.cbp.entity.TKcRecord;
import com.shenmintech.cbp.entity.TKcRecordExample;
import com.shenmintech.cbp.entity.TKcRecordType;
import com.shenmintech.cbp.entity.TKcRecordTypeExample;
import com.shenmintech.cbp.exception.ApplicationException;
import com.shenmintech.cbp.mapper.TKcEmployeeMapper;
import com.shenmintech.cbp.mapper.TKcRecordMapper;
import com.shenmintech.cbp.mapper.TKcRecordTypeMapper;
import com.shenmintech.cbp.service.IRecordService;
import com.shenmintech.cbp.service.ITToolAccountService;
import com.shenmintech.common.util.Constants;
import com.shenmintech.common.util.DateUtil;
import com.shenmintech.common.util.StringUtil;

@Component
@SuppressWarnings("static-access")
public class RecordBizImpl implements IRecordBiz{

	@Autowired
	TKcRecordMapper tKcRecordMapper;
	
	@Autowired
	TKcRecordTypeMapper tKcRecordTypeMapper;
	
	@Autowired
	IRecordService iRecordService;
	
	@Autowired
	TKcEmployeeMapper tKcEmployeeMapper;
	
	@Autowired
	ITToolAccountService iTToolAccountService;
	
	@Override
	public Res4GetRecordsBean getRecords(Req4GetRecordsBean req4GetRecordsBean) {
		Res4GetRecordsBean resBean = new Res4GetRecordsBean();
		
		String keywords = req4GetRecordsBean.getKeywords();
		String recordTypeId = req4GetRecordsBean.getRecordTypeId();
		
		int pageNo = -1==req4GetRecordsBean.getPageNo()?1:req4GetRecordsBean.getPageNo();
		int rowsPerPage = -1==req4GetRecordsBean.getPageNo()?99999:req4GetRecordsBean.getRowsPerPage();
		
		TKcRecordExample tKcRecordExample = new TKcRecordExample();
		TKcRecordExample.Criteria criteria = tKcRecordExample.createCriteria();
		criteria.andStatusNotEqualTo(-1);
		if(StringUtil.isNotBlank(keywords)) criteria.andRecordNameLike("%"+ keywords +"%");
		if(StringUtil.isNotBlank(recordTypeId)) criteria.andRecordTypeFidEqualTo(recordTypeId);
		int recordCount = tKcRecordMapper.countByExample(tKcRecordExample);
		PagingExample pagingExample = new PagingExample(pageNo, rowsPerPage);
		tKcRecordExample.setPagingExample(pagingExample);
		tKcRecordExample.setOrderByClause("record_index desc");
		List<TKcRecord> tKcRecords = tKcRecordMapper.selectByExample(tKcRecordExample);
		
		Iterator<TKcRecord> it = tKcRecords.iterator();
		List<RecordModel> recordList = new ArrayList<>();
		while (it.hasNext()) {
			RecordModel recordModel = new RecordModel();
			TKcRecord record = it.next();
			String recordId = record.getId();
			recordModel.setRecordId(recordId);
			String recordName = record.getRecordName();
			recordModel.setRecordName(recordName);
			String recordTypeFid = record.getRecordTypeFid();
			TKcRecordType tKcRecordType = tKcRecordTypeMapper.selectByPrimaryKey(recordTypeFid);
			recordModel.setRecordType(recordTypeFid);
			String recordTypeName = tKcRecordType.getTypeName();
			recordModel.setRecordTypeName(recordTypeName);
			Integer viewPermission = record.getViewPermission();
			switch (viewPermission) {
			case 1://所有用户
				recordModel.setViewPermission(viewPermission.toString());
				recordModel.setViewPermissionDesc("所有用户");
				break;
			case 2://企业用户
				recordModel.setViewPermission(viewPermission.toString());
				recordModel.setViewPermissionDesc("企业用户");
				break;
			default:
				recordModel.setViewPermission("--");
				break;
			}
			Date createTime = record.getCreateTime();
			String cTimeStr = DateUtil.format(createTime, DateUtil.DATETYPE_1);
			recordModel.setCreateTime(cTimeStr);
			
			String title1 = record.getTitle1();
			String title2 = record.getTitle2();
			String title3 = record.getTitle3();
			recordModel.setTitles(new StringBuffer(title1).append("<br/>").append(title2).append("<br/>").append(title3).toString());
			
			String picId = record.getCoverPictureId();
			recordModel.setCoverPictureId(picId);
			String fileId = record.getFileId();
			recordModel.setFileId(fileId);
			
			int duration = record.getDuration();//课程时长/秒
			int min = duration/60;
			int sec = duration%60;
			recordModel.setDuration(new StringBuffer().append(min).append(":").append(sec).toString());
			recordModel.setMinutes(String.valueOf(min));
			recordModel.setSeconds(String.valueOf(sec));
			double recordSize = record.getRecordSize();
			recordModel.setRecordSize(new StringBuffer(String.valueOf(recordSize)).toString());
			recordModel.setHideFlag(record.getHideFlag().toString());
			String recordSynopsis = record.getRecordDescribe();
			recordModel.setRecordSynopsis(recordSynopsis);
			recordModel.setRecordIndex(record.getRecordIndex().toString());
			recordList.add(recordModel);
		}
		
		//开始查询类型列表
		TKcRecordTypeExample tKcRecordTypeExample = new TKcRecordTypeExample();
		tKcRecordTypeExample.or().andStatusNotEqualTo(-1).andIdIsNotNull();
		List<TKcRecordType> tKcRecordTypes = tKcRecordTypeMapper.selectByExample(tKcRecordTypeExample);
		Iterator<TKcRecordType> ita = tKcRecordTypes.iterator();
		List<RecordType> typeList = new ArrayList<>();
		while (ita.hasNext()) {
			RecordType recordType = new RecordType();
			TKcRecordType tKcRecordType = ita.next();
			recordType.setRecordTypeId(tKcRecordType.getId());
			recordType.setRecordTypename(tKcRecordType.getTypeName());
			typeList.add(recordType);
		}
		
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setPageNo(pageNo);
		resBean.setPageSumCount((recordCount+rowsPerPage-1)/rowsPerPage);
		resBean.setRecordCount(recordCount);
		resBean.setRecordList(recordList);
		resBean.setSuccess(true);
		resBean.setTypeList(typeList);
		return resBean;
	}

	@Override
	public Res4DeleteRecordBean deleteRecord(Req4DeleteRecordBean req4DeleteRecordBean) {
		Res4DeleteRecordBean resBean = new Res4DeleteRecordBean();
		String recordId = req4DeleteRecordBean.getRecordId();
		if(StringUtil.isBlank(recordId)){
			resBean.setError(-1);
			resBean.setMsg("recordId不能为空");
			resBean.setSuccess(false);
		}
		
		iRecordService.delById(recordId);
		
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

	@Override
	public Res4PostRecordBean postRecord(Req4PostRecordBean req4PostRecordBean) {
		Res4PostRecordBean resBean = new Res4PostRecordBean();
		
		String recordName = req4PostRecordBean.getRecordName();//视频名称
		if(StringUtil.isBlank(recordName)){
			resBean.setError(-1);
			resBean.setMsg("recordName不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		String recordTypeId = req4PostRecordBean.getRecordTypeId();//视频类型
		if(StringUtil.isBlank(recordTypeId)){
			resBean.setError(-1);
			resBean.setMsg("recordTypeId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		TKcRecordType tKcRecordType = tKcRecordTypeMapper.selectByPrimaryKey(recordTypeId);
		if(null==tKcRecordType){
			resBean.setError(-1);
			resBean.setMsg("不存在id为"+recordTypeId+"的录播类型");
			resBean.setSuccess(false);
			return resBean;
		}
		
		String viewPermission = req4PostRecordBean.getViewPermission();//观看权限
		if(StringUtil.isBlank(viewPermission)){
			resBean.setError(-1);
			resBean.setMsg("viewPermission不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		if(!"1".equals(viewPermission)&&!"2".equals(viewPermission)){
			resBean.setError(-1);
			resBean.setMsg("viewPermission必须为1所有用户，2企业用户");
			resBean.setSuccess(false);
			return resBean;
		}
		String title1 = req4PostRecordBean.getTitle1();
		String title2 = req4PostRecordBean.getTitle2();
		String title3 = req4PostRecordBean.getTitle3();
		
		String coverPictureId = req4PostRecordBean.getCoverPictureId();
		if(StringUtil.isBlank(coverPictureId)){
			resBean.setError(-1);
			resBean.setMsg("coverPictureId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		String fileId = req4PostRecordBean.getFileId();
		if(StringUtil.isBlank(fileId)){
			resBean.setError(-1);
			resBean.setMsg("fileId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		
		String minutes = req4PostRecordBean.getMinutes();
		String seconds = req4PostRecordBean.getSeconds();
		if(StringUtil.isBlank(minutes)&&StringUtil.isBlank(seconds)){
			resBean.setError(-1);
			resBean.setMsg("minutes,second不能都为空");
			resBean.setSuccess(false);
			return resBean;
		}
		int duration = 0;
		if(StringUtil.isNotBlank(minutes)){
			try {
				int min = Integer.parseInt(minutes);
				duration += min*60;
			} catch (Exception e) {
				resBean.setError(-1);
				resBean.setMsg("minutes必须为int");
				resBean.setSuccess(false);
				return resBean;
			}
		}
		if(StringUtil.isNotBlank(seconds)){
			try {
				int sec = Integer.parseInt(seconds);
				duration += sec;
			} catch (Exception e) {
				resBean.setError(-1);
				resBean.setMsg("seconds必须为int");
				resBean.setSuccess(false);
				return resBean;
			}
		}

		String recordSize = req4PostRecordBean.getRecordSize();
		if(StringUtil.isBlank(recordSize)){
			resBean.setError(-1);
			resBean.setMsg("recordSize不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		double recordSizeDb = 0.00d;
		try {
			recordSizeDb = Double.parseDouble(recordSize);
		} catch (Exception e) {
			resBean.setError(-1);
			resBean.setMsg("recordSize必须可以转为double");
			resBean.setSuccess(false);
			return resBean;
		}
		
		String hideFlag = req4PostRecordBean.getHideFlag();
		if(StringUtil.isBlank(hideFlag)){
			resBean.setError(-1);
			resBean.setMsg("hideFlag不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		if(!"0".equals(hideFlag)&&!"1".equals(hideFlag)){
			resBean.setError(-1);
			resBean.setMsg("hideFlag必须为0或者1");
			resBean.setSuccess(false);
			return resBean;
		}
		
		String recordSynopsis = req4PostRecordBean.getRecordSynopsis();//视频简介
		if(StringUtil.isBlank(recordSynopsis)){
			resBean.setError(-1);
			resBean.setMsg("recordSynopsis不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		
		Req4PostRecordVo recordVo = new Req4PostRecordVo().builder()
				.recordName(recordName)
				.recordTypeId(recordTypeId)
				.viewPermission(viewPermission)
				.title1(title1)
				.title2(title2)
				.title3(title3)
				.coverPictureId(coverPictureId)
				.fileId(fileId)
				.duration(duration)
				.recordSizeDb(recordSizeDb)
				.hideFlag(hideFlag)
				.recordSynopsis(recordSynopsis)
				.build();
		
		iRecordService.addRecord(recordVo);
		
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

	@Override
	public Res4PutRecordBean putRecord(Req4PutRecordBean req4PutRecordBean) {
		Res4PutRecordBean resBean = new Res4PutRecordBean();
		
		String recordId = req4PutRecordBean.getRecordId();
		if(StringUtil.isBlank(recordId)){
			resBean.setError(-1);
			resBean.setMsg("recordId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		
		String recordName = req4PutRecordBean.getRecordName();//视频名称
		if(StringUtil.isBlank(recordName)){
			resBean.setError(-1);
			resBean.setMsg("recordName不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		String recordTypeId = req4PutRecordBean.getRecordTypeId();//视频类型
		if(StringUtil.isBlank(recordTypeId)){
			resBean.setError(-1);
			resBean.setMsg("recordTypeId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		TKcRecordType tKcRecordType = tKcRecordTypeMapper.selectByPrimaryKey(recordTypeId);
		if(null==tKcRecordType){
			resBean.setError(-1);
			resBean.setMsg("不存在id为"+recordTypeId+"的录播类型");
			resBean.setSuccess(false);
			return resBean;
		}
		
		String viewPermission = req4PutRecordBean.getViewPermission();//观看权限
		if(StringUtil.isBlank(viewPermission)){
			resBean.setError(-1);
			resBean.setMsg("viewPermission不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		if(!"1".equals(viewPermission)||!"2".equals(viewPermission)){
			resBean.setError(-1);
			resBean.setMsg("viewPermission必须为1所有用户，2企业用户");
			resBean.setSuccess(false);
			return resBean;
		}
		String title1 = req4PutRecordBean.getTitle1();
		String title2 = req4PutRecordBean.getTitle2();
		String title3 = req4PutRecordBean.getTitle3();
		
		String coverPictureId = req4PutRecordBean.getCoverPictureId();
		if(StringUtil.isBlank(coverPictureId)){
			resBean.setError(-1);
			resBean.setMsg("coverPictureId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		String fileId = req4PutRecordBean.getFileId();
		if(StringUtil.isBlank(fileId)){
			resBean.setError(-1);
			resBean.setMsg("fileId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		
		String minutes = req4PutRecordBean.getMinutes();
		String seconds = req4PutRecordBean.getSeconds();
		if(StringUtil.isBlank(minutes)&&StringUtil.isBlank(seconds)){
			resBean.setError(-1);
			resBean.setMsg("minutes,second不能都为空");
			resBean.setSuccess(false);
			return resBean;
		}
		int duration = 0;
		if(StringUtil.isNotBlank(minutes)){
			try {
				int min = Integer.parseInt(minutes);
				duration += min*60;
			} catch (Exception e) {
				resBean.setError(-1);
				resBean.setMsg("minutes必须为int");
				resBean.setSuccess(false);
				return resBean;
			}
		}
		if(StringUtil.isNotBlank(seconds)){
			try {
				int sec = Integer.parseInt(seconds);
				duration += sec;
			} catch (Exception e) {
				resBean.setError(-1);
				resBean.setMsg("seconds必须为int");
				resBean.setSuccess(false);
				return resBean;
			}
		}

		String recordSize = req4PutRecordBean.getRecordSize();
		if(StringUtil.isBlank(recordSize)){
			resBean.setError(-1);
			resBean.setMsg("recordSize不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		double recordSizeDb = 0.00d;
		try {
			recordSizeDb = Double.parseDouble(recordSize);
		} catch (Exception e) {
			resBean.setError(-1);
			resBean.setMsg("recordSize必须可以转为double");
			resBean.setSuccess(false);
			return resBean;
		}
		
		String hideFlag = req4PutRecordBean.getHideFlag();
		if(StringUtil.isBlank(hideFlag)){
			resBean.setError(-1);
			resBean.setMsg("hideFlag不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		if(!"0".equals(hideFlag)&&!"1".equals(hideFlag)){
			resBean.setError(-1);
			resBean.setMsg("hideFlag必须为0或者1");
			resBean.setSuccess(false);
			return resBean;
		}
		
		String recordSynopsis = req4PutRecordBean.getRecordSynopsis();//视频简介
		if(StringUtil.isBlank(recordSynopsis)){
			resBean.setError(-1);
			resBean.setMsg("recordSynopsis不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		
		Req4PutRecordVo recordVo = new Req4PutRecordVo().builder()
				.recordId(recordId)
				.recordName(recordName)
				.recordTypeId(recordTypeId)
				.viewPermission(viewPermission)
				.title1(title1)
				.title2(title2)
				.title3(title3)
				.coverPictureId(coverPictureId)
				.fileId(fileId)
				.duration(duration)
				.recordSizeDb(recordSizeDb)
				.hideFlag(hideFlag)
				.recordSynopsis(recordSynopsis)
				.build();
		
		try {
			iRecordService.updateRecordById(recordVo);
		} catch (ApplicationException e) {
			resBean.setError(-1);
			resBean.setMsg(e.msg);
			resBean.setSuccess(false);
			return resBean;
		} catch (Exception e) {
			resBean.setError(-1);
			resBean.setMsg(e.getMessage());
			resBean.setSuccess(false);
			return resBean;
		}
		
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

	@Override
	public Res4PatchIndexBean patchIndex(Req4PatchIndexBean req4PatchIndexBean) {
		Res4PatchIndexBean resBean = new Res4PatchIndexBean();
		String recordId = req4PatchIndexBean.getRecordId();
		if(StringUtil.isBlank(recordId)){
			resBean.setError(-1);
			resBean.setMsg("recordId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		String changeFlg = req4PatchIndexBean.getChangeFlg();
		if(StringUtil.isBlank(changeFlg)){
			resBean.setError(-1);
			resBean.setMsg("changeFlg不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		if(!"0".equals(changeFlg)&&!"1".equals(changeFlg)&&!"2".equals(changeFlg)){
			resBean.setError(-1);
			resBean.setMsg("changeFlg必须为0或1或2");
			resBean.setSuccess(false);
			return resBean;
		}
		
		switch (changeFlg) {
		case "0"://置顶
			iRecordService.stickTop(recordId);
			break;
		case "1"://上移
			try {
				iRecordService.moveUp(recordId);
			} catch (ApplicationException e) {
				resBean.setError(-1);
				resBean.setMsg(e.msg);
				resBean.setSuccess(false);
				return resBean;
			}
			break;
		case "2"://下移
			try {
				iRecordService.moveDown(recordId);
			} catch (ApplicationException e) {
				resBean.setError(-1);
				resBean.setMsg(e.msg);
				resBean.setSuccess(false);
				return resBean;
			}
			break;
		}
		
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

	@Override
	public Res4PutRecordStatusBean putRecordStatus(Req4PutRecordStatusBean req4PutRecordStatusBean) {
		Res4PutRecordStatusBean resBean = new Res4PutRecordStatusBean();
		String recordId = req4PutRecordStatusBean.getRecordId();
		if(StringUtil.isBlank(recordId)){
			resBean.setError(-1);
			resBean.setMsg("recordId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		String hideFlag = req4PutRecordStatusBean.getHideFlag();
		if(StringUtil.isBlank(recordId)){
			resBean.setError(-1);
			resBean.setMsg("hideFlag不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		if(!"0".equals(hideFlag)&&!"1".equals(hideFlag)){
			resBean.setError(-1);
			resBean.setMsg("hideFlag必须为0或者1");
			resBean.setSuccess(false);
			return resBean;
		}
		
		iRecordService.updateRecordStatus(recordId, Integer.parseInt(hideFlag));
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

	@Override
	public ResRecords4AppBean getRecords4App(ReqRecords4AppBean req4Records4AppBean) {
		ResRecords4AppBean resBean = new ResRecords4AppBean();
		
		String userId = req4Records4AppBean.getUserId();
		TKcEmployeeExample tKcEmployeeExample = new TKcEmployeeExample();
		tKcEmployeeExample.or().andStatusNotEqualTo(-1).andUserIdEqualTo(userId);
		
		int userCount = tKcEmployeeMapper.countByExample(tKcEmployeeExample);
		boolean entryFlag;//入职标识，true为已入职，false为未入职
		if(0==userCount){
			entryFlag = false;
		}else if(1==userCount){
			entryFlag = true;
		}else{
			resBean.setError(-1);
			resBean.setMsg("用户id:"+userId+"在员工表中存在多条记录，为脏数据（一个用户最多只能入职一家公司）");
			resBean.setSuccess(false);
			return resBean;
		}
		
		TKcRecordExample tKcRecordExample = new TKcRecordExample();
		TKcRecordExample.Criteria criteria = tKcRecordExample.createCriteria();
		criteria.andStatusNotEqualTo(-1);
		if(entryFlag){
			criteria.andViewPermissionBetween(1, 2);
		}else{
			criteria.andViewPermissionEqualTo(1);
		}
		List<TKcRecord> tKcRecords = tKcRecordMapper.selectByExample(tKcRecordExample);
		List<RecordTypeModel4App> records = new ArrayList<>();
		if(0==tKcRecords.size()){
			resBean.setRecords(records);
			resBean.setError(0);
			resBean.setMsg("SUCCESS");
			resBean.setSuccess(true);
			return resBean;
		}
		
		Map<String, List<TKcRecord>> recordMap = tKcRecords.stream().sorted(Comparator.comparing(TKcRecord::getRecordIndex)).collect(Collectors.groupingBy(TKcRecord::getRecordTypeFid));
		for (Map.Entry<String, List<TKcRecord>> entry : recordMap.entrySet()) {
			RecordTypeModel4App model4App = new RecordTypeModel4App();
			String recordTypeId = entry.getKey();
			TKcRecordType tKcRecordType = tKcRecordTypeMapper.selectByPrimaryKey(recordTypeId);
			if(null == tKcRecordType) {
				resBean.setError(-1);
				resBean.setMsg("recordTypeId:"+recordTypeId+"在录播类型表中不存在");
				resBean.setSuccess(false);
				return resBean;
			}
			String recordTypeName = tKcRecordType.getTypeName();
			model4App.setRecordType(recordTypeId);
			model4App.setRecordTypeName(recordTypeName);
			List<RecordModel4App> recordModel = new ArrayList<>();
			List<TKcRecord> tkcRecords = entry.getValue();
			Iterator<TKcRecord> it = tkcRecords.iterator();
			int i = 0;
			while (it.hasNext()) {
				if(5<=i) break;
				i++;
				TKcRecord tKcRecord = it.next();
				String recordId = tKcRecord.getId();
				String recordName = tKcRecord.getRecordName();
				String coverPictureId = tKcRecord.getCoverPictureId();
				String fileId = tKcRecord.getFileId();
				String duration = new StringBuffer().append(tKcRecord.getDuration()/60).append(":").append(tKcRecord.getDuration()%60).toString();
				int playAmount = iTToolAccountService.countOfActionByPassiveId(recordId, Constants.PLAY_ACTION_CODE);
				RecordModel4App recordModel4App = new RecordModel4App().builder()
						.recordId(recordId)
						.recordName(recordName)
						.coverPictureId(coverPictureId)
						.fileId(fileId)
						.duration(duration)
						.playAmount(String.valueOf(playAmount))
						.build();
				recordModel.add(recordModel4App);
			}
			model4App.setRecordModel(recordModel);
			records.add(model4App);
		}
		resBean.setRecords(records);
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		resBean.setUserId(userId);
		return resBean;
	}

	@Override
	public ResRecordAccount4AppBean patchRecordAccount4App(ReqRecordAccount4AppBean reqRecordAccount4AppBean) {
		ResRecordAccount4AppBean resBean = new ResRecordAccount4AppBean();
		String userId = reqRecordAccount4AppBean.getUserId();
		String recordId = reqRecordAccount4AppBean.getRecordId();
		if(StringUtil.checkBlank(userId,recordId)){
			resBean.setError(-1);
			resBean.setMsg("userId,recordId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		iTToolAccountService.addAccount(userId, recordId, Constants.PLAY_ACTION_CODE);
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		return resBean;
	}

	@Override
	public ResRecordsByType4AppBean getRecordsByType4App(ReqRecordsByType4AppBean reqRecordsByType4AppBean) {
		ResRecordsByType4AppBean resBean = new ResRecordsByType4AppBean();
		String userId = reqRecordsByType4AppBean.getUserId();
		String recordTypeId = reqRecordsByType4AppBean.getRecordTypeId();
		int pageNo = reqRecordsByType4AppBean.getPageNo();
		int rowsPerPage = reqRecordsByType4AppBean.getRowsPerPage();
		
		if(StringUtil.checkBlank(userId,recordTypeId)){
			resBean.setError(-1);
			resBean.setMsg("userId,recordTypeId不能为空");
			resBean.setSuccess(false);
			return resBean;
		}
		TKcRecordType tKcRecordType = tKcRecordTypeMapper.selectByPrimaryKey(recordTypeId);
		if(null == tKcRecordType){
			resBean.setError(-1);
			resBean.setMsg("recordTypeId="+recordTypeId+"在tKcRecordType表中未查到记录");
			resBean.setSuccess(false);
			return resBean;
		}
		String recordTypeName = tKcRecordType.getTypeName();
		TKcEmployeeExample tKcEmployeeExample = new TKcEmployeeExample();
		tKcEmployeeExample.or().andStatusNotEqualTo(-1).andUserIdEqualTo(userId);
		int userCount = tKcEmployeeMapper.countByExample(tKcEmployeeExample);
		boolean entryFlag;//入职标识，true为已入职，false为未入职
		if(0==userCount){
			entryFlag = false;
		}else if(1==userCount){
			entryFlag = true;
		}else{
			resBean.setError(-1);
			resBean.setMsg("用户id:"+userId+"在员工表中存在多条记录，为脏数据（一个用户最多只能入职一家公司）");
			resBean.setSuccess(false);
			return resBean;
		}
		TKcRecordExample tKcRecordExample = new TKcRecordExample();
		TKcRecordExample.Criteria criteria = tKcRecordExample.createCriteria();
		criteria.andStatusNotEqualTo(-1).andRecordTypeFidEqualTo(recordTypeId);
		if(entryFlag){
			criteria.andViewPermissionBetween(1, 2);
		}else{
			criteria.andViewPermissionEqualTo(1);
		}
		int recordCount = tKcRecordMapper.countByExample(tKcRecordExample);
		
		PagingExample pagingExample = new PagingExample(pageNo, rowsPerPage);
		tKcRecordExample.setPagingExample(pagingExample);
		tKcRecordExample.setOrderByClause("record_index desc");
		List<TKcRecord> tKcRecords = tKcRecordMapper.selectByExample(tKcRecordExample);
		List<RecordModel4App> recordModel = new ArrayList<>();
		
		Iterator<TKcRecord> it = tKcRecords.iterator();
		while (it.hasNext()) {
			TKcRecord tKcRecord = it.next();
			String recordId = tKcRecord.getId();
			String recordName = tKcRecord.getRecordName();
			String coverPictureId = tKcRecord.getCoverPictureId();
			String fileId = tKcRecord.getFileId();
			String duration = new StringBuffer().append(tKcRecord.getDuration()/60).append(":").append(tKcRecord.getDuration()%60).toString();
			int playAmount = iTToolAccountService.countOfActionByPassiveId(recordId, Constants.PLAY_ACTION_CODE);
			RecordModel4App recordModel4App = new RecordModel4App().builder()
					.recordId(recordId)
					.recordName(recordName)
					.coverPictureId(coverPictureId)
					.fileId(fileId)
					.duration(duration)
					.playAmount(String.valueOf(playAmount))
					.build();
			recordModel.add(recordModel4App);
		}
		resBean.setError(0);
		resBean.setMsg("SUCCESS");
		resBean.setSuccess(true);
		resBean.setPageNo(pageNo);
		resBean.setPageSumCount((recordCount+rowsPerPage-1)/rowsPerPage);
		resBean.setRecordCount(recordCount);
		resBean.setRecordType(recordTypeId);
		resBean.setRecordTypeName(recordTypeName);
		resBean.setRecordModel(recordModel);
		return resBean;
	}
	

}
